[build-system]
requires = [
    "setuptools>=63",
    "wheel"
]
build-backend = "setuptools.build_meta"

[project]
name = "smprofiler"
version = "1.0.67"
authors = [
    { name = "James Mathews", email = "mathewj2@mskcc.org" }
]
description = "Toolbox for spatial analysis of single cell data."
readme = "README.md"
classifiers = [
    "Programming Language :: Python :: 3",
    "Topic :: Scientific/Engineering",
    "Intended Audience :: Science/Research",
]
requires-python = ">=3.13"
dependencies = [
    "attrs",
    "boto3",
    "botocore",
    "cattrs",
    "jinja2",
    "numba>=0.44.0",
    "psycopg",
    "pyshp",
    "pytz",
    "requests",
    "termplotlib",
]

[project.urls]
documentation = "https://github.com/nadeemlab/smprofiler"
repository = "https://github.com/nadeemlab/smprofiler"

[project.optional-dependencies]
all = [
    "adiscstudies",
    "attrs",
    "bokeh",
    "boto3",
    "botocore",
    "Brotli",
    "cattrs",
    "cryptography",
    "dask[dataframe]",
    "dask-expr",
    "fastapi",
    "h5py",
    "jinja2",
    "matplotlib",
    "networkx",
    "numcodecs==0.15.1",
    "numpy",
    "pandas",
    "psycopg",
    "pydantic",
    "PyJWT",
    "pyshp",
    "pytz",
    "requests",
    "secure",
    "scipy",
    "scikit-learn",
    "squidpy>=1.6.2", "zarr<3",
    "tables",
    "tabulate",
    "termplotlib",
    "tqdm",
    "umap-learn",
    "uvicorn",
    "zstandard",
]
apiserver = [
    "adiscstudies",
    "attrs",
    "Brotli",
    "cryptography",
    "fastapi",
    "matplotlib",
    "networkx",
    "pandas",
    "psycopg",
    "pydantic",
    "PyJWT",
    "pytz",
    "requests",
    "scipy",
    "secure",
    "uvicorn",
    "zstandard",
]
graphs = [
    "bokeh",
    "h5py",
    "matplotlib",
    "networkx",
    "requests",
    "tables",
]
ondemand = [
    "attrs",
    "cattrs",
    "Brotli",
    "dask[dataframe]",
    "dask-expr",
    "numpy",
    "numcodecs==0.15.1",
    "pandas",
    "psycopg",
    "pydantic",
    "scipy",
    "scikit-learn",
    "squidpy>=1.6.2", "zarr<3",
    "tabulate",
    "tqdm",
    "umap-learn",
    "zstandard",
]
dev = [
    "autopep8",
    "mypy",
    "pylint",
    "pytest",
]

[project.scripts]
smprofiler = "smprofiler.entry_point.cli:main_program"
smprofiler-enable-completion = "smprofiler.entry_point.smprofiler_enable_completion:main_program"

[tool.setuptools]
packages = [
    "smprofiler",
    "smprofiler.standalone_utilities",
    "smprofiler.entry_point",
    "smprofiler.apiserver",
    "smprofiler.apiserver.app",
    "smprofiler.apiserver.request_scheduling",
    "smprofiler.apiserver.scripts",
    "smprofiler.graphs",
    "smprofiler.graphs.scripts",
    "smprofiler.ondemand",
    "smprofiler.ondemand.providers",
    "smprofiler.ondemand.computers",
    "smprofiler.ondemand.scripts",
    "smprofiler.db",
    "smprofiler.db.accessors",
    "smprofiler.db.exchange_data_formats",
    "smprofiler.db.scripts",
    "smprofiler.db.data_model",
    "smprofiler.workflow",
    "smprofiler.workflow.scripts",
    "smprofiler.workflow.component_interfaces",
    "smprofiler.workflow.graph_generation",
    "smprofiler.workflow.graph_plugin",
    "smprofiler.workflow.tabular_import",
    "smprofiler.workflow.tabular_import.parsing",
    "smprofiler.workflow.common",
    "smprofiler.workflow.common.logging",
    "smprofiler.workflow.assets",
]

[tool.setuptools.package-data]
"smprofiler" = ["py.typed"]
"smprofiler.entry_point" = ["smprofiler-completion.sh.jinja"]
"smprofiler.workflow.scripts" = [
    "aggregate_core_results.py",
    "core_job.py",
    "extract_compartments.py",
    "generate_run_information.py",
    "initialize.py",
    "merge_performance_reports.py",
    "merge_sqlite_dbs.py",
    "report_run_configuration.py",
    "configure.py",
    "tail_logs.py",
]
"smprofiler.workflow.assets" = [
    ".smprofiler_db.config.template",
    ".workflow.config.template",
    "log_table.tex.jinja",
    "log_table.html.jinja",
    "main_visitor.nf",
    "nextflow.config.jinja",
]
"smprofiler.workflow.graph_generation" = [
    "graph_generation.nf",
    "main.nf",
]
"smprofiler.workflow.graph_plugin" = ["main.nf"]
"smprofiler.workflow.tabular_import" = ["main.nf"]
"smprofiler.apiserver.scripts" = [
    "dump_schema.py",
]
"smprofiler.ondemand.scripts" = [
    "read_expression_dump_file.py",
    "assess_recreate_cache.py",
    "start.py",
]
"smprofiler.db.scripts" = [
    "create_schema.py",
    "guess_channels_from_object_files.py",
    "status.py",
    "retrieve_feature_matrices.py",
    "drop.py",
    "drop_ondemand_computations.py",
    "delete_feature.py",
    "upload_sync_small.py",
    "collection.py",
    "interactive_uploader.py",
    "load_testing.py",
    "sync_annotations.py",
    "count_cells.py",
    "cache_subsample.py",
]
"smprofiler.db.data_model" = [
    "metaschema.sql",
    "drop_metaschema.sql",
    "create_roles.sql",
    "create_views.sql",
    "drop_views.sql",
    "fields.tsv",
    "grant_on_tables.sql",
    "performance_tweaks.sql",
    "refresh_views.sql",
    "feature_descriptions.tsv",
]
"smprofiler.graphs.scripts" = [
    "create_specimen_graphs.py",
    "explore_classes.py",
    "extract.py",
    "finalize_graphs.py",
    "generate_graphs.py",
    "plot_importance_fractions.py",
    "plot_interactives.py",
    "prepare_graph_creation.py",
    "upload_importances.py",
]
