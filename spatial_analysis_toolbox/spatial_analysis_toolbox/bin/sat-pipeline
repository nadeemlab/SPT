#!/bin/bash
# This script is an interactive dialog to solicit configuration parameters for
# a run of the spatial-analysis-toolbox pipeline. The jobs are then generated
# and scheduled or run.
# Configuration parameters are saved to file. If this saved file is present on
# subsequent runs, the interactive dialog is skipped.
green="\u001b[1;32m"
magenta="\u001b[1;35m"
cyan="\u001b[1;36m"
yellow="\u001b[33m"
red="\u001b[31m"
bold_red="\u001b[31;1m"
blue="\u001b[34m"
reset="\u001b[0m"
cr="\033[F"
upline="\033[A"

function schedule_scripts {
    for script in schedule_$RUN_PLATFORM*.sh
    do
        cmd="./$script"
        echo "$cmd"
        "$cmd"
    done
}

config_filename=$( sat_print.py config-filename )
if [[ -f "$config_filename" ]]; then
    echo -e "$yellow""Regenerating jobs and scheduling them.""$reset"
    echo -e "$yellow""Using parameters from $reset""$magenta$config_filename$reset$yellow.$reset"
    echo -e "$yellow""To reconfigure, update or delete $magenta$config_filename$reset"
    sat_generate_jobs.py
    chmod +x *.sh
    config_filename=$(sat_print.py config-filename)
    RUN_PLATFORM=$(grep -oP 'runtime_platform = \K.*' $config_filename)
    schedule_scripts
    exit
fi

function abspath {
    if [[ -d "$1" ]]
    then
        pushd "$1" >/dev/null
        pwd
        popd >/dev/null
    elif [[ -e "$1" ]]
    then
        pushd "$(dirname "$1")" >/dev/null
        echo "$(pwd)/$(basename "$1")"
        popd >/dev/null
    else
        echo "$1" does not exist! >&2
        return 127
    fi
}

workflows=()
IFS=$'\n' read -r -d '' -a workflows < <( sat_print.py computational-workflows && printf '\0' )
show_prompt_str () {
    echo -ne "$yellow""Enter the computational workflow type""$reset"
    echo -ne " $magenta(  "
    first_entry=""
    for workflow in "${workflows[@]}"
    do
        if [[ "$first_entry" == "" ]];
        then
            echo -ne "$cyan$workflow$reset  "
            first_entry="0"
        else
            echo -ne "$magenta$workflow$reset  "
        fi
    done
    echo -ne "$magenta)$reset$yellow: $reset"
}

COMPUTATIONAL_WORKFLOW="none"
while [[ "$COMPUTATIONAL_WORKFLOW" = "none" ]];
do
    show_prompt_str
    read -e COMPUTATIONAL_WORKFLOW_READ
    for workflow in "${workflows[@]}"
    do
        if [[ "$COMPUTATIONAL_WORKFLOW_READ" = "$workflow" ]];
        then
            COMPUTATIONAL_WORKFLOW=$COMPUTATIONAL_WORKFLOW_READ
        fi
    done

    if [[ "$COMPUTATIONAL_WORKFLOW_READ" == "" ]];
    then
        COMPUTATIONAL_WORKFLOW="${workflows[0]}"
        echo
    fi

    if [[ "$COMPUTATIONAL_WORKFLOW" != "none" ]];
    then
        echo -ne "$cr"
        show_prompt_str
        echo -ne "$green$COMPUTATIONAL_WORKFLOW$reset"
        echo
    fi
done

SIF_PATH=""
prompt_str="Enter the Singularity container file (.sif) containing the toolbox: "
echo -en "$yellow$prompt_str$reset"
while [[ "$SIF_PATH" = "" ]];
do
    read -e SIF_PATH
done
SIF_PATH=$(abspath $SIF_PATH)
echo -e "$cr$yellow$prompt_str$reset$green$SIF_PATH$reset"

INPUT_PATH=""
prompt_str="Enter the path containing input cell location CSV files: "
echo -en "$yellow$prompt_str$reset"
while [[ "$INPUT_PATH" = "" ]];
do
    read -e INPUT_PATH
done
INPUT_PATH=$(abspath $INPUT_PATH)
echo -e "$cr$yellow$prompt_str$reset$green$INPUT_PATH$reset"

FILE_MANIFEST=""
prompt_str="Enter the file manifest file: "
echo -en "$yellow$prompt_str$reset"
while [[ "$FILE_MANIFEST" = "" ]];
do
    read -e FILE_MANIFEST
done
FILE_MANIFEST=$(abspath $FILE_MANIFEST)
echo -e "$cr$yellow$prompt_str$reset$green$FILE_MANIFEST$reset"

OUTCOMES_FILE=""
prompt_str="Enter the file containing outcomes data (or \"$magenta""None""$reset$yellow\"): "
echo -en "$yellow$prompt_str$reset"
while [[ "$OUTCOMES_FILE" = "" ]];
do
    read -e OUTCOMES_FILE
done
OUTCOMES_FILE=$(abspath $OUTCOMES_FILE)
echo -e "$cr$yellow$prompt_str$reset$green$OUTCOMES_FILE$reset"

# OUTPUT_PATH=""
# prompt_str="Enter the path to which the jobs themselves should write output (default ""$reset$magenta""output/""$reset$yellow""): "
# echo -en "$yellow$prompt_str$reset"
# read -e OUTPUT_PATH
# if [[ "$OUTPUT_PATH" = "" ]];
# then
#     OUTPUT_PATH="output/"
#     echo
# fi
OUTPUT_PATH="output/"
mkdir $OUTPUT_PATH
OUTPUT_PATH=$(abspath $OUTPUT_PATH)
# echo -e "$cr$yellow$prompt_str$reset$green$OUTPUT_PATH$reset"


ELEMENTARY_PHENOTYPES_FILE="none"
COMPLEX_PHENOTYPES_FILE="none"
if [[ "$COMPUTATIONAL_WORKFLOW" = "Multiplexed IF diffusion" || "$COMPUTATIONAL_WORKFLOW" = "Multiplexed IF phenotype proximity" ]];
then
    prompt_str="Enter the file containing metadata for the channels/observed phenotypes: "
    echo -en "$yellow$prompt_str$reset"
    while [[ "$ELEMENTARY_PHENOTYPES_FILE" = "none" || "$ELEMENTARY_PHENOTYPES_FILE" = "" ]];
    do
        read -e ELEMENTARY_PHENOTYPES_FILE
    done
    ELEMENTARY_PHENOTYPES_FILE=$(abspath $ELEMENTARY_PHENOTYPES_FILE)
    echo -e "$cr$yellow$prompt_str$reset$green$ELEMENTARY_PHENOTYPES_FILE$reset"

    COMPLEX_PHENOTYPES_FILE=""
    prompt_str="Enter the file that lists composite phenotypes of interest: "
    echo -en "$yellow$prompt_str$reset"
    while [[ "$COMPLEX_PHENOTYPES_FILE" = "none" || "$COMPLEX_PHENOTYPES_FILE" = "" ]];
    do
        read -e COMPLEX_PHENOTYPES_FILE
    done
    COMPLEX_PHENOTYPES_FILE=$(abspath $COMPLEX_PHENOTYPES_FILE)
    echo -e "$cr$yellow$prompt_str$reset$green$COMPLEX_PHENOTYPES_FILE$reset"
fi

RUN_PLATFORM=""
prompt_str="Select runtime platform: (""$reset$cyan""lsf""$reset$magenta  local""$reset$yellow""): "
while [[ "$RUN_PLATFORM" != "lsf" && "$RUN_PLATFORM" != "local" ]];
do
    echo -en "$yellow$prompt_str$reset"
    read -e RUN_PLATFORM
    if [[ "$RUN_PLATFORM" = "" ]];
    then
        RUN_PLATFORM="lsf"
        echo
    fi

    if [[ "$RUN_PLATFORM" == "lsf" ]];
    then
        bsub_location=$(command -v bsub)
        if [[ "$bsub_location" == "" ]];
        then
            echo -e "$cyan""bsub""$reset$red"" command not found and is required to schedule LSF jobs. Choose runtime platform ""$reset$magenta""local""$reset"
            RUN_PLATFORM=""
        fi
    fi
done && echo -e "$cr$yellow$prompt_str$reset$green$RUN_PLATFORM$reset"

START_IMMEDIATELY=""
prompt_str="Schedule immediately? (""$reset$cyan""Y""$reset$magenta/n""$reset$yellow""): "
echo -en "$yellow$prompt_str$reset"
read -e START_IMMEDIATELY
if [[ "$START_IMMEDIATELY" = "" ]];
then
    START_IMMEDIATELY="Y"
    echo
fi
if [[ "$START_IMMEDIATELY" = "y" ]];
then
    START_IMMEDIATELY="Y"
fi
if [[ "$START_IMMEDIATELY" != "Y" ]];
then
    START_IMMEDIATELY="n"
fi
echo -e "$cr$yellow$prompt_str$reset$green$START_IMMEDIATELY$reset"

JOBS_PATH='jobs'
JOBS_PATH=$(abspath $JOBS_PATH)

SCHEDULERS_PATH='./'
SCHEDULERS_PATH=$(abspath $SCHEDULERS_PATH)

echo -e "$yellow""Job scripts will be written to $green$JOBS_PATH$reset"
echo -e "$yellow""scheduler scripts to ""$green$SCHEDULERS_PATH$reset"

sat_generate_jobs.py \
    --sif-file $SIF_PATH \
    --computational-workflow "$COMPUTATIONAL_WORKFLOW" \
    --input-path $INPUT_PATH \
    --outcomes-file $OUTCOMES_FILE \
    --output-path $OUTPUT_PATH \
    --jobs-path $JOBS_PATH \
    --schedulers-path $SCHEDULERS_PATH \
    --file-manifest $FILE_MANIFEST \
    --runtime-platform $RUN_PLATFORM \
    --elementary-phenotypes-file $ELEMENTARY_PHENOTYPES_FILE \
    --complex-phenotypes-file $COMPLEX_PHENOTYPES_FILE \

chmod +x *.sh

if [[ "$START_IMMEDIATELY" == "Y" ]];
then
    schedule_scripts
fi
