import time
import random
import re
import subprocess
import configparser
import argparse

import spatialprofilingtoolbox
from spatialprofilingtoolbox.countsserver.counts_service_client import CountRequester


def get_default_counts_server_port():
    with importlib.resources.path('spatialprofilingtoolbox.standalone_utilities', 'port_assignments.config') as path:
        parser = configparser.ConfigParser()
        parser.read(path)
        port = int(parser['defaults']['COUNTSSERVER'])
    return port


if __name__=='__main__':
    parser = argparse.ArgumentParser(
        description = 'Benchmark the counts server performance.',
    )
    parser.add_argument(
        '--countsserver-host',
        dest='countsserver_host',
        type=str,
        default='spt-service-countsserver.local',
    )
    parser.add_argument(
        '--countsserver-port',
        dest='countsserver_port',
        type=int,
        default=get_default_counts_server_port(),
    )
    args = parser.parse_args()
    host = args.host
    port = args.port

    fixed_cases = [
        ['CD3'],
        ['CD3', 'CD4'],
        ['DAPI', 'CD20', 'KI67', 'LAG3'],
        ['DAPI', 'CD20', 'CD3', 'CD68'],
        ['B2M', 'MHCI', 'PD1', 'PDL1', 'CD25', 'CD27'],
        ['CD20', 'CD3', 'CD68'],
        ['DAPI', 'CD3', 'CD68'],
        ['DAPI', 'CD20', 'CD68'],
        ['DAPI', 'CD20', 'CD3'],
        ['MHCI', 'PD1', 'PDL1', 'CD25', 'CD27'],
        ['B2M', 'PD1', 'PDL1', 'CD25', 'CD27'],
        ['B2M', 'MHCI', 'PDL1', 'CD25', 'CD27'],
        ['B2M', 'MHCI', 'PD1', 'CD25', 'CD27'],
        ['B2M', 'MHCI', 'PD1', 'PDL1', 'CD27'],
        ['B2M', 'MHCI', 'PD1', 'PDL1', 'CD25'],
    ]
    all_channel_names = ['B2M', 'B7H3', 'CD14', 'CD163', 'CD20', 'CD25', 'CD27', 'CD3', 'CD4', 'CD56', 'CD68', 'CD8', 'DAPI', 'FOXP3', 'IDO1', 'KI67', 'LAG3', 'MHCI', 'MHCII', 'MRC1', 'PD1', 'PDL1', 'S100B', 'SOX10', 'TGM2', 'TIM3']
    study_name = 'Melanoma intralesional IL2 (Hollmann lab) - specimen collection'

    with CountRequester(host, port) as requester:
        counts = requester.get_counts_by_specimen(['CD3'], ['CD8', 'CD20'], study_name)
    count = sum([c[0] for c in counts.values()])
    print('%s' % ('{:14}'.format(str(count))))

    tic = time.perf_counter()
    for case in fixed_cases:
        with CountRequester(host, port) as requester:
            counts = requester.get_counts_by_specimen(case, [], study_name)
        count = sum([c[0] for c in counts.values()])
        print('%s %s' % ('{:14}'.format(str(count)), ' '.join(case)))
    toc = time.perf_counter()
    print('Completed %s count actions in %s' % (len(fixed_cases), f'{toc - tic:0.4f} seconds'))
    per_second = len(fixed_cases) / (toc - tic)
    print('That is %s per second.' % per_second)
    print('')

    for size in range(1, len(all_channel_names)):
        trials = 10
        print('Randomly sampling %s channels %s times then querying for structure count.' % (size, trials))
        tic = time.perf_counter()
        for i in range(trials):
            case = list(random.sample(all_channel_names, size))
            with CountRequester(host, port) as requester:
                counts = requester.get_counts_by_specimen(case, [], study_name)
            count = sum([c[0] for c in counts.values()])
            print('%s %s' % ('{:14}'.format(str(count)), ' '.join(case)))
        toc = time.perf_counter()
        per_second = trials / (toc - tic)
        print('%s per second.' % per_second)
        print('')
