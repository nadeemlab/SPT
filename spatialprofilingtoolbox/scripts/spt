#!usr/bin/env python3
import argparse
import sys
import importlib

import spatialprofilingtoolbox
from spatialprofilingtoolbox import submodule_names

def get_executable_and_script(submodule_name, script_name):
    script_paths = [
        f for f in importlib.resources.files('spatialprofilingtoolbox.%s' % submodule_name)
        if re.search(r'/' + script_name + r'(\.py)?$', str(f))
    ]
    if len(script_paths) != 1:
        raise ValueError('Did not find script "%s" in submodule "%s".' % (script_name, submodule_name))
    script_path = script_paths[0]
    if re.search('.py$', script_path):
        executable = sys.executable
    else:
        executable = '/bin/bash'
    return executable, script_path

if __name__=='__main__':
    parser = argparse.ArgumentParser(
        prog='spt',
        description = 'spatialprofilingtoolbox commands',
    )
    parser.add_argument(
        'module',
        choices=submodule_names,
        required=True,
        help='The specific submodule the command is from.',
    )
    parser.add_argument(
        'command',
        required=False,
        help='The command name.',
    )
    parser.add_argument(
        'command_arguments',
        nargs='*',
        help='Arguments passed to the command.',
    )
    args = parser.parse_args()

    executable, script_path = get_executable_and_script(args.module, args.command)

    if args.command is None:
        parser.print_help(sys.stderr)
        exit()

    if len(sys.argv) == 3 and sys.argv[1] == args.module and sys.argv[2] == args.command:
        subprocess.run([
            executable,
            script_path,
            '--help',
        ])
        exit()

    if len(sys.argv) > 3 and sys.argv[1] == args.module and sys.argv[2] == args.command:
        unparsed_arguments = sys.argv[3:]
        subprocess.run([
            executable,
            script_path,
            unparsed_arguments,
        ])
        exit()
