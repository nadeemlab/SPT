function setup(){
    setup_table_header()
    setup_info_area()
    pull_study_names('cached-measurement-names')
    pull_study_names('cached-analysis-names')
}

function setup_info_area() {
    infobutton = document.getElementById("phenotype-summary-about-button")
    infobutton.addEventListener("click", function(e) {
        abouttext = document.getElementById("phenotype-summary-about-text")
        if (this.innerHTML == '+ info') {
            this.innerHTML = '- info'
            abouttext.style.display = 'block'
        } else {
            this.innerHTML = '+ info'
            abouttext.style.display = 'none'
        }
    })
}

function pull_study_names(cache_element_id) {
    var id = cache_element_id
    if (names_are_cached(id)) {
        handle_names(id, get_cached_response_text(id), null)
    } else {
        var query_specifier;
        if (id == 'cached-measurement-names') {
            query_specifier = 'specimen-measurement-study-names'
        }
        if (id == 'cached-analysis-names') {
            query_specifier = 'data-analysis-study-names'
        }
        URL=`{{ protocol }}://{{ api_url }}/${query_specifier}`
        get_from_url(URL, function(response, event){
            handle_names(id, response.responseText, event)
        })
    }
}

function names_are_cached(cache_element_id) {
    var cache = document.getElementById(cache_element_id)
    if (cache.getAttribute("hascache") == "true") {
        return true
    }
    return false
}

function get_cached_response_text(cache_element_id) {
    var cache = document.getElementById(cache_element_id)
    return cache.innerHTML
}

function cache_names_response(cache_element_id, responseText) {
    var cache = document.getElementById(cache_element_id)
    cache.innerHTML = responseText
    cache.setAttribute("hascache", "true")
}

function get_from_url(url, callback=function(response, event){}){
    var httpreq = new XMLHttpRequest();
    httpreq.open("GET", url, async=true);
    httpreq.onload = function(event) {callback(this, event)}
    httpreq.send(null);
}

function handle_names(cache_element_id, responseText, event) {
    cache_names_response(cache_element_id, responseText)
    var obj = JSON.parse(responseText)
    let study_names = Array.from(
        new Set(
            obj[Object.keys(obj)[0]]
        )
    )
    setup_study_selector(cache_element_id)
    create_study_list(cache_element_id, study_names)
}

function setup_table_header() {
    var table = document.getElementById("fractionstable")
    table.innerHTML = ''

    header = ["Marker", "Multiplicity", "Assay", "Result", "Mean % <br/>cells positive", "Standard deviation <br/>of % values", "Maximum", "Value", "Minimum", "Value"]
    header_row = document.createElement("tr")
    for (var i = 0, len = header.length; i < len; ++i) {
        cell = document.createElement("th")
        cell.innerHTML = header[i] + '&nbsp;'
        sort_button = document.createElement("span");
        sort_button.innerHTML = " [+] "
        sort_button.setAttribute("onclick", "sort_data_rows(" + i + "," + "1)")
        sort_button.setAttribute("class", "sortbutton")
        sort_button2 = document.createElement("span");
        sort_button2.innerHTML = " [-] "
        sort_button2.setAttribute("onclick", "sort_data_rows(" + i + "," + "-1)")
        sort_button2.setAttribute("class", "sortbutton")
        cell.appendChild(sort_button)
        cell.appendChild(sort_button2)
        header_row.appendChild(cell)
    }
    table.appendChild(header_row)
}

function create_study_list(cache_element_id, study_names) {
    var selector_id
    if (cache_element_id == 'cached-measurement-names') {
        selector_id = 'measurement-study-selector'
    }
    if (cache_element_id == 'cached-analysis-names') {
        selector_id = 'analysis-study-selector'
    }
    var study_selector = document.getElementById(selector_id)
    var select = study_selector.querySelectorAll(":scope > select")[0]
    var deletable = select.querySelectorAll("option.studyoption")
    for (var j = 0; j < deletable.length; ++j) {
        deletable[j].remove()
    }
    var study_list = document.getElementById(cache_element_id + "-studyinnerlist")
    study_list.innerHTML = ''
    for (var i = 0; i < study_names.length; ++i) {
        var study = study_names[i]
        var option = document.createElement("option")
        option.setAttribute("class", "studyoption")
        option.setAttribute("value", i+1)
        option.setAttribute("studyname", study)
        option.innerHTML = study;
        select.appendChild(option)

        var item = document.createElement("div")
        item.innerHTML = study;
        item.setAttribute("studyname", study)
        item.addEventListener("click", function(e) {
            /* When an item is clicked, update the original select box,
            and the selected item: */
            var y, i, k, s, h, sl, yl;
            s = this.parentNode.parentNode.getElementsByTagName("select")[0];
            sl = s.length;
            h = this.parentNode.previousSibling;
            for (i = 0; i < sl; i++) {
              if (s.options[i].innerHTML == this.innerHTML) {
                s.selectedIndex = i;
                h.innerHTML = this.innerHTML;
                y = this.parentNode.getElementsByClassName("same-as-selected");
                yl = y.length;
                for (k = 0; k < yl; k++) {
                  y[k].removeAttribute("class");
                }
                this.setAttribute("class", "same-as-selected");
                break;
              }
            }
            document.getElementById(cache_element_id + '-selection').innerHTML = this.getAttribute("studyname")
            pull_study_summary(cache_element_id, this.getAttribute("studyname"))
            pull_data_from_studies()
            h.click();
        });
        study_list.appendChild(item)
    }
}

function pull_study_summary(cache_element_id, study_name) {
    var table = get_summary_table(cache_element_id)
    if (table.children.length > 0) {
        return
    }

    var study_phase_indicator
    if (cache_element_id == 'cached-measurement-names') {
        study_phase_indicator = 'specimen-measurement-study-summary'
    }
    if (cache_element_id == 'cached-analysis-names') {
        study_phase_indicator = 'data-analysis-study-summary'
    }

    var encoded_study_name = encodeURIComponent(study_name)
    var URL=`{{ protocol }}://{{ api_url }}/${study_phase_indicator}/${encoded_study_name}`
    toggle_loading_gif(cache_element_id, state="show")
    get_from_url(URL, function(response, event){load_study_summary(cache_element_id, response.responseText, event)})
}

function load_study_summary(cache_element_id, responseText, event) {
    var table = get_summary_table(cache_element_id)
    var properties = JSON.parse(responseText)
    table.style.display = 'inline'
    for (var key of Object.keys(properties)) {
        var tr = document.createElement("tr")
        var key_td = document.createElement("td")
        var value_td = document.createElement("td")
        key_td.setAttribute("class", "key")
        key_td.innerHTML = key
        value_td.innerHTML = "" + properties[key]
        tr.appendChild(key_td)
        tr.appendChild(value_td)
        table.appendChild(tr)
    }
    toggle_loading_gif(cache_element_id, "off")
}

function toggle_loading_gif(cache_element_id, state) {
    var loadinggif_id
    if (cache_element_id == 'cached-measurement-names') {
        loadinggif_id = 'measurement-study-attributes-loading'
    }
    if (cache_element_id == 'cached-analysis-names') {
        loadinggif_id = 'analysis-study-attributes-loading'
    }
    var loadinggif = document.getElementById("loadinggif_id")
    if (state == "off") {
        loadinggif.style.display = "none"
    }
    if (state == "on") {
        loadinggif.style.display = "inline"
    }
}

function get_summary_table(cache_element_id) {
    var summary_table_id
    if (cache_element_id == 'cached-measurement-names') {
        summary_table_id = 'measurement-study-attributes'
    }
    if (cache_element_id == 'cached-analysis-names') {
        summary_table_id = 'analysis-study-attributes'
    }
    return document.getElementById(summary_table_id)    
}

function pull_data_from_studies() {
    measurement_name = document.getElementById('cached-measurement-names' + '-selection').innerHTML
    if (measurement_name == '') {
        return
    }
    analysis_name = document.getElementById('cached-analysis-names' + '-selection').innerHTML 
    if (analysis_name == '') {
        return
    }
    var encoded_measurement_study = encodeURIComponent(measurement_name)
    var encoded_data_analysis_study = encodeURIComponent(analysis_name)
    var URL=`{{ protocol }}://{{ api_url }}/phenotype-summary/?specimen_measurement_study=${encoded_measurement_study}&data_analysis_study=${encoded_data_analysis_study}`
    get_from_url(URL, load_study)
}

function clear_table() {
    var table = document.getElementById("fractionstable")
    table.innerHTML = ''
    setup_table_header()
}

function load_study(response, event) {
    var stats = JSON.parse(response.responseText)
    clear_table()
    var table = document.getElementById("fractionstable")
    var obj = stats[Object.keys(stats)[0]];
    for (var i = 0, len = obj.length; i < len; ++i) {
        data_row = obj[i]
        table_row = document.createElement("tr")
        for (var j = 0; j < 10; ++j) {
            cell = document.createElement("td")
            entry = data_row[j]
            if (j==4) {
                integer_percent = Math.round(parseFloat(entry))
                container = document.createElement("div")
                container.setAttribute("class", "overlayeffectcontainer")
                underlay = document.createElement("div")
                underlay.setAttribute("class", "underlay")
                overlay = document.createElement("div")
                overlay.setAttribute("class", "overlay")
                overlay.innerHTML = entry
                underlay.style.width = integer_percent + "%"
                container.appendChild(underlay)
                container.appendChild(overlay)
                cell.appendChild(container)
            } else {
                if (j==2 || j==3) {
                    entry = entry.replace(/<any>/, '<em>any</em>')
                }
                cell.innerHTML = entry
            }
            table_row.appendChild(cell)
        }
        table.appendChild(table_row)
    }
    update_row_counter()
}

function sort_data_rows(column_index, sign) {
    var table = document.getElementById("fractionstable")
    var tr_elements = get_ordered_data_rows(column_index, sign)
    for (var i = 0; i < tr_elements.length; ++i) {
        table.appendChild(tr_elements[i])
    }
    update_row_counter()
}

function get_ordered_data_rows(column_index, sign) {
    var table = document.getElementById("fractionstable")
    var all_rows = Array.from(table.children)
    var values_indices = [];
    for (var i = 1; i < all_rows.length; ++i) {
        row = all_rows[i]
        td = Array.from(row.children)[column_index]
        values_indices.push([i-1, td.innerText]);
    }

    compare = function(a, b) {
        if (column_index==4 || column_index==5 || column_index==7 || column_index==9) {
            return (parseFloat(a[1]) - parseFloat(b[1])) * sign;
        } else {
            if (a[1] > b[1]) {
                return 1 * sign
            }
            if (a[1] < b[1]) {
                return -1 * sign
            }
            if (a[1] == b[1]) {
                return 0
            }
        }
    }
    values_indices.sort(compare)
    var new_rows = [];
    for (var i = 0; i < values_indices.length; ++i) {
        index = values_indices[i][0]
        new_rows.push(all_rows[index + 1])
    }
    return new_rows
}

function setup_study_selector(cache_element_id) {
    var i, j, l, ll, selectElement, a, b, c;
    /* Look for any elements with the class "custom-select": */
    var selector_id;
    if (cache_element_id == 'cached-measurement-names') {
        selector_id = 'measurement-study-selector'
    }
    if (cache_element_id == 'cached-analysis-names') {
        selector_id = 'analysis-study-selector'
    }
    var x = new Array();
    x.push(document.getElementById(selector_id))
    l = x.length;
    for (i = 0; i < l; i++) {
      selectElement = x[i].getElementsByTagName("select")[0];
      ll = selectElement.length;
      /* For each element, create a new DIV that will act as the selected item: */
      a = document.createElement("DIV");
      a.setAttribute("class", "select-selected");
      a.innerHTML = selectElement.options[selectElement.selectedIndex].innerHTML;
      x[i].appendChild(a);
      /* For each element, create a new DIV that will contain the option list: */
      b = document.createElement("DIV");
      b.setAttribute("class", "select-items select-hide");
      b.setAttribute("id", cache_element_id + "-studyinnerlist")
      for (j = 1; j < ll; j++) {
        /* For each option in the original select element,
        create a new DIV that will act as an option item: */
        c = document.createElement("DIV");
        c.innerHTML = selectElement.options[j].innerHTML;
        c.addEventListener("click", function(e) {
            /* When an item is clicked, update the original select box,
            and the selected item: */
            var y, i, k, s, h, sl, yl;
            s = this.parentNode.parentNode.getElementsByTagName("select")[0];
            sl = s.length;
            h = this.parentNode.previousSibling;
            for (i = 0; i < sl; i++) {
              if (s.options[i].innerHTML == this.innerHTML) {
                s.selectedIndex = i;
                h.innerHTML = this.innerHTML;
                y = this.parentNode.getElementsByClassName("same-as-selected");
                yl = y.length;
                for (k = 0; k < yl; k++) {
                  y[k].removeAttribute("class");
                }
                this.setAttribute("class", "same-as-selected");
                break;
              }
            }
            h.click();
        });
        b.appendChild(c);
      }
      x[i].appendChild(b);
      a.addEventListener("click", function(e) {
        /* When the select box is clicked, close any other select boxes,
        and open/close the current select box: */
        e.stopPropagation();
        closeAllSelect(this);
        this.nextSibling.classList.toggle("select-hide");
        this.classList.toggle("select-arrow-active");
      });
    }

    /* If the user clicks anywhere outside the select box,
    then close all select boxes: */
    document.addEventListener("click", closeAllSelect);
}

function closeAllSelect(element) {
  /* A function that will close all select boxes in the document,
  except the current select box: */
  var x, y, i, xl, yl, arrNo = [];
  x = document.getElementsByClassName("select-items");
  y = document.getElementsByClassName("select-selected");
  xl = x.length;
  yl = y.length;
  for (i = 0; i < yl; i++) {
    if (element == y[i]) {
      arrNo.push(i)
    } else {
      y[i].classList.remove("select-arrow-active");
    }
  }
  for (i = 0; i < xl; i++) {
    if (arrNo.indexOf(i)) {
      x[i].classList.add("select-hide");
    }
  }
}

function update_row_counter() {
    number_rows = document.getElementById("fractionstable").children.length - 1
    rowcountbox = document.getElementById("rowcountbox")
    rowcountbox.style.display = "inline-block";
    document.getElementById("rowcounter").innerHTML = number_rows
}
